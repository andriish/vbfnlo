cmk Customized SUBROUTINE and its FUNCTION (see line 185) for
cmk checks with the gluon fusion code (Higgs + 3 jets).
cmk Generated by MadGraph II. Sub-sub-process: u u -> u u g H   
cmk Search for "cmk" to see modifications. For further informations
cmk check files mgcheck.F, m2s_ggf3jh.F.

cmk      SUBROUTINE SMATRIX(P1,ANS)
      SUBROUTINE SMATRIXuuuugH2(P1,ANS)
C  
C Generated by MadGraph II                                              
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C AND HELICITIES
C FOR THE POINT IN PHASE SPACE P(0:3,NEXTERNAL)
C  
C FOR PROCESS : u u -> u u g h  
C  
C Crossing   1 is u u -> u u g h  
      IMPLICIT NONE
C  
C CONSTANTS
C  
      Include "genps.inc"
      INTEGER                 NCOMB,     NCROSS         
      PARAMETER (             NCOMB=  32, NCROSS=  1)
      INTEGER    THEL
      PARAMETER (THEL=NCOMB*NCROSS)
C  
C ARGUMENTS 
C  
      REAL*8 P1(0:3,NEXTERNAL),ANS(NCROSS)
C  
C LOCAL VARIABLES 
C  
      INTEGER NHEL(NEXTERNAL,NCOMB),NTRY
      REAL*8 T, P(0:3,NEXTERNAL)
cmk      REAL*8 MATRIX
      REAL*8 MATRIXuuuugH2
      INTEGER IHEL,IDEN(NCROSS),IC(NEXTERNAL,NCROSS)
      INTEGER IPROC,JC(NEXTERNAL), I
      LOGICAL GOODHEL(NCOMB,NCROSS)
      INTEGER NGRAPHS
      REAL*8 hwgt, xtot, xtry, xrej, xr, yfrac(0:ncomb)
      INTEGER idum, ngood, igood(ncomb), jhel, j, jj
      LOGICAL warned
      REAL     xran1
      EXTERNAL xran1
C  
C GLOBAL VARIABLES
C  
      Double Precision amp2(maxamps), jamp2(0:maxamps)
cmk      common/to_amps/  amp2,       jamp2

      character*79         hel_buff
cmk      common/to_helicity/  hel_buff

      REAL*8 POL(2)
cmk      common/to_polarization/ POL

      integer          isum_hel
      logical                    multi_channel
cmk      common/to_matrix/isum_hel, multi_channel
      INTEGER MAPCONFIG(0:LMAXCONFIGS), ICONFIG
cmk      common/to_mconfigs/mapconfig, iconfig
      DATA NTRY,IDUM /0,-1/
      DATA xtry, xrej, ngood /0,0,0/
      DATA warned, isum_hel/.false.,0/
cmk      DATA multi_channel/.true./
      SAVE yfrac, igood, jhel
      DATA NGRAPHS /   24/          
      DATA jamp2(0) /   8/          
      DATA GOODHEL/THEL*.FALSE./
      DATA (NHEL(IHEL,   1),IHEL=1, 6) /-1,-1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,   2),IHEL=1, 6) /-1,-1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,   3),IHEL=1, 6) /-1,-1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,   4),IHEL=1, 6) /-1,-1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,   5),IHEL=1, 6) /-1,-1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,   6),IHEL=1, 6) /-1,-1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,   7),IHEL=1, 6) /-1,-1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,   8),IHEL=1, 6) /-1,-1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,   9),IHEL=1, 6) /-1, 1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  10),IHEL=1, 6) /-1, 1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  11),IHEL=1, 6) /-1, 1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  12),IHEL=1, 6) /-1, 1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  13),IHEL=1, 6) /-1, 1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  14),IHEL=1, 6) /-1, 1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  15),IHEL=1, 6) /-1, 1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  16),IHEL=1, 6) /-1, 1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  17),IHEL=1, 6) / 1,-1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  18),IHEL=1, 6) / 1,-1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  19),IHEL=1, 6) / 1,-1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  20),IHEL=1, 6) / 1,-1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  21),IHEL=1, 6) / 1,-1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  22),IHEL=1, 6) / 1,-1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  23),IHEL=1, 6) / 1,-1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  24),IHEL=1, 6) / 1,-1, 1, 1, 1,-1/
      DATA (NHEL(IHEL,  25),IHEL=1, 6) / 1, 1,-1,-1,-1,-1/
      DATA (NHEL(IHEL,  26),IHEL=1, 6) / 1, 1,-1,-1, 1,-1/
      DATA (NHEL(IHEL,  27),IHEL=1, 6) / 1, 1,-1, 1,-1,-1/
      DATA (NHEL(IHEL,  28),IHEL=1, 6) / 1, 1,-1, 1, 1,-1/
      DATA (NHEL(IHEL,  29),IHEL=1, 6) / 1, 1, 1,-1,-1,-1/
      DATA (NHEL(IHEL,  30),IHEL=1, 6) / 1, 1, 1,-1, 1,-1/
      DATA (NHEL(IHEL,  31),IHEL=1, 6) / 1, 1, 1, 1,-1,-1/
      DATA (NHEL(IHEL,  32),IHEL=1, 6) / 1, 1, 1, 1, 1,-1/
      DATA (  IC(IHEL,  1),IHEL=1, 6) / 1, 2, 3, 4, 5, 6/
      DATA (IDEN(IHEL),IHEL=  1,  1) /  72/
C ----------
C BEGIN CODE
C ----------
      NTRY=NTRY+1
      DO IPROC=1,NCROSS
cmk      CALL SWITCHMOM(P1,P,IC(1,IPROC),JC,NEXTERNAL)
      DO IHEL=1,NEXTERNAL
         JC(IHEL) = +1
      ENDDO
       
      IF (multi_channel) THEN
          DO IHEL=1,NGRAPHS
              amp2(ihel)=0d0
              jamp2(ihel)=0d0
          ENDDO
          DO IHEL=1,int(jamp2(0))
              jamp2(ihel)=0d0
          ENDDO
      ENDIF
      ANS(IPROC) = 0D0
      write(hel_buff,'(16i5)') (0,i=1,nexternal)
      IF (ISUM_HEL .EQ. 0 .OR. NTRY .LT. 10) THEN
          DO IHEL=1,NCOMB
             IF (GOODHEL(IHEL,IPROC) .OR. NTRY .LT. 2) THEN
cmk                 T=MATRIX(P ,NHEL(1,IHEL),JC(1))            
                 T=MATRIXuuuugH2(P ,NHEL(1,IHEL),JC(1))            
               DO JJ=1,nincoming
                 IF(POL(JJ).NE.1d0.AND.
     &              NHEL(JJ,IHEL).EQ.INT(SIGN(1d0,POL(JJ)))) THEN
                   T=T*ABS(POL(JJ))
                 ELSE IF(POL(JJ).NE.1d0)THEN
                   T=T*(2d0-ABS(POL(JJ)))
                 ENDIF
               ENDDO
               ANS(IPROC)=ANS(IPROC)+T
               IF (T .NE. 0D0 .AND. .NOT.    GOODHEL(IHEL,IPROC)) THEN
                   GOODHEL(IHEL,IPROC)=.TRUE.
                   NGOOD = NGOOD +1
                   IGOOD(NGOOD) = IHEL
               ENDIF
             ENDIF
          ENDDO
          JHEL = 1
          ISUM_HEL=MIN(ISUM_HEL,NGOOD)
      ELSE              !RANDOM HELICITY
          DO J=1,ISUM_HEL
              JHEL=JHEL+1
              IF (JHEL .GT. NGOOD) JHEL=1
              HWGT = REAL(NGOOD)/REAL(ISUM_HEL)
              IHEL = IGOOD(JHEL)
cmk              T=MATRIX(P ,NHEL(1,IHEL),JC(1))            
              T=MATRIXuuuugH2(P ,NHEL(1,IHEL),JC(1))            
              DO JJ=1,nincoming
                IF(POL(JJ).NE.1d0.AND.
     &             NHEL(JJ,IHEL).EQ.INT(SIGN(1d0,POL(JJ)))) THEN
                  T=T*ABS(POL(JJ))
                ELSE IF(POL(JJ).NE.1d0)THEN
                  T=T*(2d0-ABS(POL(JJ)))
                ENDIF
              ENDDO
              ANS(IPROC)=ANS(IPROC)+T*HWGT
          ENDDO
          IF (ISUM_HEL .EQ. 1) THEN
              WRITE(HEL_BUFF,'(16i5)')(NHEL(i,IHEL),i=1,nexternal)
          ENDIF
      ENDIF
      IF (MULTI_CHANNEL) THEN
          XTOT=0D0
          DO IHEL=1,MAPCONFIG(0)
              XTOT=XTOT+AMP2(MAPCONFIG(IHEL))
          ENDDO
          IF (XTOT.NE.0D0) THEN
              ANS(IPROC)=ANS(IPROC)*AMP2(MAPCONFIG(ICONFIG))/XTOT
          ELSE
              ANS(IPROC)=0D0
          ENDIF
      ENDIF
      ANS(IPROC)=ANS(IPROC)/DBLE(IDEN(IPROC))
      ENDDO
      END
       
       
cmk      REAL*8 FUNCTION MATRIX(P,NHEL,IC)
      REAL*8 FUNCTION MATRIXuuuugH2(P,NHEL,IC)
C  
C Generated by MadGraph II                                              
C RETURNS AMPLITUDE SQUARED SUMMED/AVG OVER COLORS
C FOR THE POINT WITH EXTERNAL LINES W(0:6,NEXTERNAL)
C  
C FOR PROCESS : u u -> u u g h  
C  
      IMPLICIT NONE
C  
C CONSTANTS
C  
cmk      
#include "genps.inc"
#include "ggfloMG.inc"
#include "VBFNLO/utilities/coupl.inc"
cmk
      INTEGER    NGRAPHS,    NEIGEN 
      PARAMETER (NGRAPHS=  24,NEIGEN=  8) 
cmk      include "genps.inc"
      INTEGER    NWAVEFUNCS     , NCOLOR
      PARAMETER (NWAVEFUNCS=  44, NCOLOR=   8) 
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
C  
C ARGUMENTS 
C  
      REAL*8 P(0:3,NEXTERNAL)
      INTEGER NHEL(NEXTERNAL), IC(NEXTERNAL)
C  
C LOCAL VARIABLES 
C  
      INTEGER I,J
      COMPLEX*16 ZTEMP
      REAL*8 DENOM(NCOLOR), CF(NCOLOR,NCOLOR)
      COMPLEX*16 AMP(NGRAPHS), JAMP(NCOLOR)
      COMPLEX*16 W(18,NWAVEFUNCS)
C  
C GLOBAL VARIABLES
C  
      Double Precision amp2(maxamps), jamp2(0:maxamps)
cmk      common/to_amps/  amp2,       jamp2
cmk      include "coupl.inc"
C  
C COLOR DATA
C  
      DATA Denom(1  )/            9/                                       
      DATA (CF(i,1  ),i=1  ,6  ) /    24,   -6,   21,   -3,   -8,   10/    
      DATA (CF(i,1  ),i=7  ,8  ) /     1,    1/                            
C               T[ 4, 2]T[ 3, 1, 5]                                        
      DATA Denom(2  )/            9/                                       
      DATA (CF(i,2  ),i=1  ,6  ) /    -6,   24,   -3,   21,   10,   -8/    
      DATA (CF(i,2  ),i=7  ,8  ) /     1,    1/                            
C               T[ 4, 2, 5]T[ 3, 1]                                        
      DATA Denom(3  )/            9/                                       
      DATA (CF(i,3  ),i=1  ,6  ) /    21,   -3,   24,   -6,    1,    1/    
      DATA (CF(i,3  ),i=7  ,8  ) /    -8,   10/                            
C               T[ 4, 2]T[ 3, 1, 5]                                        
      DATA Denom(4  )/            9/                                       
      DATA (CF(i,4  ),i=1  ,6  ) /    -3,   21,   -6,   24,    1,    1/    
      DATA (CF(i,4  ),i=7  ,8  ) /    10,   -8/                            
C               T[ 3, 1]T[ 4, 2, 5]                                        
      DATA Denom(5  )/            9/                                       
      DATA (CF(i,5  ),i=1  ,6  ) /    -8,   10,    1,    1,   24,   -6/    
      DATA (CF(i,5  ),i=7  ,8  ) /    -3,   21/                            
C               T[ 4, 1, 5]T[ 3, 2]                                        
      DATA Denom(6  )/            9/                                       
      DATA (CF(i,6  ),i=1  ,6  ) /    10,   -8,    1,    1,   -6,   24/    
      DATA (CF(i,6  ),i=7  ,8  ) /    21,   -3/                            
C               T[ 4, 1]T[ 3, 2, 5]                                        
      DATA Denom(7  )/            9/                                       
      DATA (CF(i,7  ),i=1  ,6  ) /     1,    1,   -8,   10,   -3,   21/    
      DATA (CF(i,7  ),i=7  ,8  ) /    24,   -6/                            
C               T[ 4, 1]T[ 3, 2, 5]                                        
      DATA Denom(8  )/            9/                                       
      DATA (CF(i,8  ),i=1  ,6  ) /     1,    1,   10,   -8,   21,   -3/    
      DATA (CF(i,8  ),i=7  ,8  ) /    -6,   24/                            
C               T[ 3, 2]T[ 4, 1, 5]                                        
C ----------
C BEGIN CODE
C ----------
cmk    CALL IXXXXX(P(0,1   ),ZERO ,NHEL(1   ),+1*IC(1   ),W(1,1   ))        
cmk    CALL IXXXXX(P(0,2   ),ZERO ,NHEL(2   ),+1*IC(2   ),W(1,2   ))        
cmk    CALL OXXXXX(P(0,3   ),ZERO ,NHEL(3   ),+1*IC(3   ),W(1,3   ))        
cmk    CALL OXXXXX(P(0,4   ),ZERO ,NHEL(4   ),+1*IC(4   ),W(1,4   ))        
cmk    CALL VXXXXX(P(0,5   ),ZERO ,NHEL(5   ),+1*IC(5   ),W(1,5   ))        
cmk    CALL SXXXXX(P(0,6   ),+1*IC(6   ),W(1,6   ))                       
cmk
      CALL IXXXXX(P(0,1),ZERO,NHEL(1)*IC(1),IC(1),W(1,1))        
      CALL IXXXXX(P(0,2),ZERO,NHEL(2)*IC(2),IC(2),W(1,2))        
      CALL OXXXXX(P(0,3),ZERO,NHEL(3)*IC(3),IC(3),W(1,3))        
      CALL OXXXXX(P(0,4),ZERO,NHEL(4)*IC(4),IC(4),W(1,4))        
      CALL VXXXXX(P(0,5),ZERO,NHEL(5)*IC(5),IC(5),W(1,5))        
      CALL SXXXXX(P(0,6),IC(6),W(1,6))                         
cmk
      CALL JIOXXX(W(1,2   ),W(1,3   ),GG ,ZERO    ,ZERO    ,W(1,7   ))     
      CALL FVOXXX(W(1,4   ),W(1,7   ),GG ,ZERO    ,ZERO    ,W(1,8   ))     
      CALL JIOXXX(W(1,1   ),W(1,8   ),GG ,ZERO    ,ZERO    ,W(1,9   ))     
      CALL VVSHXX(W(1,5   ),W(1,9   ),W(1,6   ),GH ,AMP(1   ))             
      CALL FVIXXX(W(1,1   ),W(1,5   ),GG ,ZERO    ,ZERO    ,W(1,10  ))     
      CALL JIOXXX(W(1,10  ),W(1,4   ),GG ,ZERO    ,ZERO    ,W(1,11  ))     
      CALL VVSHXX(W(1,7   ),W(1,11  ),W(1,6   ),GH ,AMP(2   ))             
      CALL JIOXXX(W(1,1   ),W(1,4   ),GG ,ZERO    ,ZERO    ,W(1,12  ))     
      CALL FVOXXX(W(1,3   ),W(1,12  ),GG ,ZERO    ,ZERO    ,W(1,13  ))     
      CALL JIOXXX(W(1,2   ),W(1,13  ),GG ,ZERO    ,ZERO    ,W(1,14  ))     
      CALL VVSHXX(W(1,5   ),W(1,14  ),W(1,6   ),GH ,AMP(3   ))             
      CALL FVIXXX(W(1,2   ),W(1,5   ),GG ,ZERO    ,ZERO    ,W(1,15  ))     
      CALL JIOXXX(W(1,15  ),W(1,3   ),GG ,ZERO    ,ZERO    ,W(1,16  ))     
      CALL VVSHXX(W(1,16  ),W(1,12  ),W(1,6   ),GH ,AMP(4   ))             
      CALL FVIXXX(W(1,2   ),W(1,12  ),GG ,ZERO    ,ZERO    ,W(1,17  ))     
      CALL JIOXXX(W(1,17  ),W(1,3   ),GG ,ZERO    ,ZERO    ,W(1,18  ))     
      CALL VVSHXX(W(1,5   ),W(1,18  ),W(1,6   ),GH ,AMP(5   ))             
      CALL FVOXXX(W(1,3   ),W(1,5   ),GG ,ZERO    ,ZERO    ,W(1,19  ))     
      CALL JIOXXX(W(1,2   ),W(1,19  ),GG ,ZERO    ,ZERO    ,W(1,20  ))     
      CALL VVSHXX(W(1,20  ),W(1,12  ),W(1,6   ),GH ,AMP(6   ))             
      CALL FVIXXX(W(1,1   ),W(1,7   ),GG ,ZERO    ,ZERO    ,W(1,21  ))     
      CALL JIOXXX(W(1,21  ),W(1,4   ),GG ,ZERO    ,ZERO    ,W(1,22  ))     
      CALL VVSHXX(W(1,5   ),W(1,22  ),W(1,6   ),GH ,AMP(7   ))             
      CALL FVOXXX(W(1,4   ),W(1,5   ),GG ,ZERO    ,ZERO    ,W(1,23  ))     
      CALL JIOXXX(W(1,1   ),W(1,23  ),GG ,ZERO    ,ZERO    ,W(1,24  ))     
      CALL VVSHXX(W(1,7   ),W(1,24  ),W(1,6   ),GH ,AMP(8   ))             
      CALL JVVXXX(W(1,12  ),W(1,7   ),G ,ZERO    ,ZERO    ,W(1,25  ))      
      CALL VVSHXX(W(1,5   ),W(1,25  ),W(1,6   ),GH ,AMP(9   ))             
      CALL VVVSXX(W(1,5   ),W(1,7   ),W(1,12  ),W(1,6   ),G ,GH ,          
     &     AMP(10  ))                                                      
      CALL JVVXXX(W(1,5   ),W(1,12  ),G ,ZERO    ,ZERO    ,W(1,26  ))      
      CALL VVSHXX(W(1,7   ),W(1,26  ),W(1,6   ),GH ,AMP(11  ))             
      CALL JVVXXX(W(1,5   ),W(1,7   ),G ,ZERO    ,ZERO    ,W(1,27  ))      
      CALL VVSHXX(W(1,12  ),W(1,27  ),W(1,6   ),GH ,AMP(12  ))             
      CALL JIOXXX(W(1,2   ),W(1,4   ),GG ,ZERO    ,ZERO    ,W(1,28  ))     
      CALL FVOXXX(W(1,3   ),W(1,28  ),GG ,ZERO    ,ZERO    ,W(1,29  ))     
      CALL JIOXXX(W(1,1   ),W(1,29  ),GG ,ZERO    ,ZERO    ,W(1,30  ))     
      CALL VVSHXX(W(1,5   ),W(1,30  ),W(1,6   ),GH ,AMP(13  ))             
      CALL JIOXXX(W(1,10  ),W(1,3   ),GG ,ZERO    ,ZERO    ,W(1,31  ))     
      CALL VVSHXX(W(1,31  ),W(1,28  ),W(1,6   ),GH ,AMP(14  ))             
      CALL JIOXXX(W(1,1   ),W(1,3   ),GG ,ZERO    ,ZERO    ,W(1,32  ))     
      CALL FVOXXX(W(1,4   ),W(1,32  ),GG ,ZERO    ,ZERO    ,W(1,33  ))     
      CALL JIOXXX(W(1,2   ),W(1,33  ),GG ,ZERO    ,ZERO    ,W(1,34  ))     
      CALL VVSHXX(W(1,5   ),W(1,34  ),W(1,6   ),GH ,AMP(15  ))             
      CALL JIOXXX(W(1,15  ),W(1,4   ),GG ,ZERO    ,ZERO    ,W(1,35  ))     
      CALL VVSHXX(W(1,32  ),W(1,35  ),W(1,6   ),GH ,AMP(16  ))             
      CALL FVIXXX(W(1,1   ),W(1,28  ),GG ,ZERO    ,ZERO    ,W(1,36  ))     
      CALL JIOXXX(W(1,36  ),W(1,3   ),GG ,ZERO    ,ZERO    ,W(1,37  ))     
      CALL VVSHXX(W(1,5   ),W(1,37  ),W(1,6   ),GH ,AMP(17  ))             
      CALL JIOXXX(W(1,1   ),W(1,19  ),GG ,ZERO    ,ZERO    ,W(1,38  ))     
      CALL VVSHXX(W(1,38  ),W(1,28  ),W(1,6   ),GH ,AMP(18  ))             
      CALL FVIXXX(W(1,2   ),W(1,32  ),GG ,ZERO    ,ZERO    ,W(1,39  ))     
      CALL JIOXXX(W(1,39  ),W(1,4   ),GG ,ZERO    ,ZERO    ,W(1,40  ))     
      CALL VVSHXX(W(1,5   ),W(1,40  ),W(1,6   ),GH ,AMP(19  ))             
      CALL JIOXXX(W(1,2   ),W(1,23  ),GG ,ZERO    ,ZERO    ,W(1,41  ))     
      CALL VVSHXX(W(1,32  ),W(1,41  ),W(1,6   ),GH ,AMP(20  ))             
      CALL JVVXXX(W(1,28  ),W(1,32  ),G ,ZERO    ,ZERO    ,W(1,42  ))      
      CALL VVSHXX(W(1,5   ),W(1,42  ),W(1,6   ),GH ,AMP(21  ))             
      CALL VVVSXX(W(1,5   ),W(1,32  ),W(1,28  ),W(1,6   ),G ,GH ,          
     &     AMP(22  ))                                                      
      CALL JVVXXX(W(1,5   ),W(1,28  ),G ,ZERO    ,ZERO    ,W(1,43  ))      
      CALL VVSHXX(W(1,32  ),W(1,43  ),W(1,6   ),GH ,AMP(23  ))             
      CALL JVVXXX(W(1,5   ),W(1,32  ),G ,ZERO    ,ZERO    ,W(1,44  ))      
      CALL VVSHXX(W(1,28  ),W(1,44  ),W(1,6   ),GH ,AMP(24  ))            
 
      JAMP(   1) = +AMP(   1)+AMP(   2)+AMP(  11)
      JAMP(   2) = +AMP(   3)+AMP(   4)-AMP(   9)+AMP(  10)+AMP(  12)
      JAMP(   3) = +AMP(   5)+AMP(   6)+AMP(   9)-AMP(  10)-AMP(  12)
      JAMP(   4) = +AMP(   7)+AMP(   8)-AMP(  11)
      JAMP(   5) = -AMP(  13)-AMP(  14)+AMP(  21)-AMP(  22)-AMP(  24)
      JAMP(   6) = -AMP(  15)-AMP(  16)-AMP(  23)
      JAMP(   7) = -AMP(  17)-AMP(  18)-AMP(  21)+AMP(  22)+AMP(  24)
      JAMP(   8) = -AMP(  19)-AMP(  20)+AMP(  23)
cmk
      do i=1,8
         mgJAMP(i)=JAMP(i)
cmk         print*,'JAMP(',i,')',JAMP(i)
      enddo
      do i=1,12
         MGamp1(NHEL(1),NHEL(2),NHEL(5),i)=AMP(i+12)
cmk         print*,'AMP(',i,')   ',MGamp1(NHEL(1),NHEL(2),NHEL(5),i)
      enddo
      do i=13,24
         MGamp1(NHEL(1),NHEL(2),NHEL(5),i)=AMP(i-12)
cmk         print*,'AMP(',i,')   ',MGamp1(NHEL(1),NHEL(2),NHEL(5),i)
      enddo
cmk

cmk      MATRIX = 0.D0 
      MATRIXuuuugH2 = 0.D0 
      DO I = 1, NCOLOR
          ZTEMP = (0.D0,0.D0)
          DO J = 1, NCOLOR
              ZTEMP = ZTEMP + CF(J,I)*JAMP(J)
          ENDDO
cmk          MATRIX =MATRIX+ZTEMP*DCONJG(JAMP(I))/DENOM(I)   
          MATRIXuuuugH2=MATRIXuuuugH2+ZTEMP*DCONJG(JAMP(I))/DENOM(I)   
      ENDDO
      Do I = 1, NGRAPHS
          amp2(i)=amp2(i)+amp(i)*dconjg(amp(i))
      Enddo
      Do I = 1, NCOLOR
          Jamp2(i)=Jamp2(i)+Jamp(i)*dconjg(Jamp(i))
      Enddo
cmk       
cmk      print*,'MATRIXuuuugH2',MATRIXuuuugH2
       MGampsq1=MATRIXuuuugH2
cmk       
C      CALL GAUGECHECK(JAMP,ZTEMP,EIGEN_VEC,EIGEN_VAL,NCOLOR,NEIGEN) 
      END
       
       
